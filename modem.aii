	string asis
	machine m65c02
	case on

	longa off
	longi off

	include 'OMM.equ'
	include 'TimeTool.equ'
	include 'PortTool.equ'
	include 'ConsoleTool.equ'
	include 'W5100.equ'
	include 'dhcp.equ'
	include 'applesoft.equ'


*
* Server usage:
*
* & HANGUP [ HangUp]
* & WAIT FOR CALL [IsRinging]
* & PICKUP [AnswerLine / OrigAnswerLine]
* & WAIT FOR CARRIER [HandleConnect]
*
*
* Client usage:
* & CALL "192.168.0.0.1:6502" [DialNumber]
* & WAIT FOR CARRIER [HandleConnect]
*

* Proline (login.b):
* &fn 1 ... 
* & pickup
* & wait for carrier
* ...
* & hangup
*

	macro
&l	cstr &x
&l	dc.b &x, 0
	endm

d0	equ $00

a1	equ $3c
a2	equ $3e
a4	equ $42


prmtbl	equ $e0
lowtr	equ $9b
rndseed	equ $c9

iqerr	equ $e199 ; generate illegal quantity error.


Header	proc

	dc.w $0000 ; header version
	dc.w 'mt' ; unique id
	dc.w end-start ; size
	dc.w start
	dc.w amperct
	dc.w $0000 ; module kind
	dc.w $0000 ; reserved
	dc.w $0000 ; reserved

start

	cmp #MSG_USER
	beq do_user

	cmp #MSG_INIT
	beq do_life
	cmp #MSG_QUIT
	beq do_life
	cmp #MSG_BORN
	beq do_life
	cmp #MSG_INFO
	beq do_info
	cmp #MSG_AMPR
	beq do_ampr
	rts

do_info
	lda a_info
	sta a1
	lda a_info+1
	sta a1+1
	rts

do_life
	; find the time tool ('tt') and serial tool ('pt')
	lda #'t'
	sta a1
	sta a1+1
	ldy #OMM_ID
	ldx #OMM_GETID
	jsr OMMVEC
	stx tt_id

	lda #'p'
	sta a1
	lda #'t'
	sta a1+1
	ldy #OMM_ID
	ldx #OMM_GETID
	jsr OMMVEC
	stx pt_id

	rts


do_user
	tya
	asl a
	tax
	jmp (user_dispatch,x)


do_ampr
	tya
	asl a
	tax
	jmp (amper_dispatch,x)


omm_put_word
	ldy #OMM_PUTWORD
	dc.b $2c
omm_get_str
	ldy #OMM_GETSTR
	dc.b $2c ; bit absolute
omm_put_str
	ldy #OMM_PUTSTR
call_omm
	ldx #OMM_ID
	jmp OMMVEC





; & mset address
amper_mset

	jmp $d995 ; data - skips to next : or EOL.
	rts

amper_bootp

	lda #$80
	sta bootp
	jsr dhcp
	bra return_a_word


amper_dhcp
; & DHCP [, var]
; todo & DHCP NEW - force renew
; todo & DHCP RESTORE - refresh existing lease

	stz bootp
	jsr dhcp

return_a_word
	sta a1
	stz a1+1

	jsr chrgot
	cmp #','
	beq @rv
	rts
@rv	jsr chrget
	jsr omm_put_word
	jmp listen



amper_mac
; & mac (strexpr)
; & mac get strvar$
	jsr chrgot
	cmp #tkGET
	beq do_mac_get
; set the mac
	jsr chkopn
	jsr omm_get_str
	jsr chkcls
	; lowtr = length,
	; lowtr+1/2 = string ptr

	jsr parse_mac
	bcs @bad

	lda #0
	sta $c0b5
	lda #SHAR
	sta $c0b6
	ldy #0
@loop
	lda mac,y
	sta $c0b7
	iny
	cpy #6
	bne @loop
	rts


@bad
	jmp $e199 ; illegal quantity error.



do_mac_get
; & mac get strvar$
; n.b. $200 input buffer is in use in direct mode.

	jsr chrget
	lda #6*2+5
	sta lowtr
	lda a_space
	sta lowtr+1
	lda a_space+1
	sta lowtr+2
	jsr mac_to_string
	jmp omm_put_str


mac_to_string
; read mac address, write to space.
	lda #0
	sta $c0b5
	lda #SHAR
	sta $c0b6

	ldy #0
@mloop
	lda $c0b7
	sta mac,y
	iny
	cpy #6
	bcc @mloop

	; y = mac offset
	; x = space offset
	ldy #0
	ldx #0
@loop
	phx

	lda mac,y
	lsr a
	lsr a
	lsr a
	lsr a
	tax
	lda hex,x
	plx
	sta space+0,x

	phx

	lda mac,y
	and #$0f
	tax
	lda hex,x
	plx
	sta space+1,x
	lda #':'
	sta space+2,x
	inx
	inx
	inx

	iny
	cpy #6*3
	bcc @loop
	rts


ip_to_string
; write ip to string to space
; returns string length in x.

	ldy #0
	ldx #0

@loop
	lda ip,y
	phx
	phy
	jsr to_bcd
	ply
	plx
	lda tmp+1
	bne @3
	lda tmp
	and #$f0
	bne @2
	bra @1


@3
	lda tmp+1
;	and #$0f ; not necessary.
	ora #'0'
	sta space,x
	inx
@2
	lda tmp
	lsr a
	lsr a
	lsr a
	lsr a
	ora #'0'
	sta space,x
	inx
@1
	lda tmp
	and #$0f
	ora #'0'
	sta space,x
	inx

	lda #'.'
	sta space,x
	inx
	iny
	cpy #4
	bcc @loop
	dex
	rts


to_bcd
; uses decimal mode to convert A to BCD.
	stz tmp
	stz tmp+1

	sed
	ldx #8
@loop
	asl a
	tay
	lda tmp
	adc tmp
	sta tmp
	lda tmp+1
	adc tmp+1
	sta tmp+1
	tya
	dex
	bne @loop
	cld
	rts





one_ip
	sta $c0b6
	ldy #0
@loop
	lda $c0b7
	sta ip,y
	iny
	cpy #4
	bne @loop

one_ip_2
	jsr ip_to_string
	stx lowtr
	lda a_space
	sta lowtr+1
	lda a_space+1
	sta lowtr+2
	jmp omm_put_str

do_ip_get
; & ip get addressvar, ...
	jsr chrget
	; read gateway, mask, ip from w5100.

	stz $c0b5

	lda #SIPR
	jsr one_ip
	jsr chrgot
	cmp #','
	bne @rts
	jsr chkcom

	lda #SUBR
	jsr one_ip
	jsr chrgot
	cmp #','
	bne @rts
	jsr chkcom

	lda #GAR
	jsr one_ip
	jsr chrgot
	cmp #','
	bne @rts
	jsr chkcom

	; dns address
	ldy #0
@loop
	lda dns_address,y
	sta ip,y
	iny
	cpy #4
	bne @loop
	jmp one_ip_2

@rts
	rts
do_ip_peek
; & ip peek var$
;
; returns peer ip address.
;
	jsr chrget

	lda a_space
	sta lowtr+1
	lda a_space+1
	sta lowtr+2
	lda #4
	sta $c0b5
	lda #Sn_DIPR
	jmp one_ip



amper_ip
; & ip (address, netmask, gateway, dns)
; & ip peek var$
; & ip get var$, ....
	jsr chrgot
	cmp #tkGET
	beq do_ip_get
	cmp #tkPEEK
	beq do_ip_peek
	jsr chkopn

@ip
	jsr omm_get_str
	lda lowtr
	beq @netmask
	jsr parse_ip_port
	bcs @err
	ldx #3
@loop1
	lda ip,x
	sta ip_address,x
	dex
	bpl @loop1

	jsr chrgot
	cmp #','
	bne @paren

@netmask
	jsr omm_get_str
	lda lowtr
	beq @gateway
	jsr parse_ip_port
	bcs @err
	ldx #3
@loop2
	lda ip,x
	sta subnet_mask,x
	dex
	bpl @loop2

	jsr chrgot
	cmp #','
	bne @paren

@gateway
	jsr omm_get_str
	lda lowtr
	beq @dns
	jsr parse_ip_port
	bcs @err
	ldx #3
@loop3
	lda ip,x
	sta gateway_address,x
	dex
	bpl @loop3

	jsr chrgot
	cmp #','
	bne @paren

@dns
	jsr omm_get_str
	lda lowtr
	beq @paren
	jsr parse_ip_port
	bcs @err
	ldx #3
@loop4
	lda ip,x
	sta gateway_address,x
	dex
	bpl @loop4

@paren
	jsr chkcls
	jsr dhcp_commit
	jmp listen

@err
	jmp $e199 ; illegal quantity error. 




parse_mac
; validate the mac string at lowtr, store to mac.
; returns carry set on error.

	lda lowtr
	cmp #6*3-1
	bne @bad

	ldy #0
	ldx #0

@loop
	lda (lowtr),y
	jsr xdigit
	bcs @bad
	sta mac,x
	inx
	iny
	lda (lowtr),y
	jsr xdigit
	bcs @bad
	sta mac,x
	inx
	iny

	cpy #6*3-1
	beq @ok
	lda (lowtr),y
	cmp #':'
	bne @bad
	iny
	bra @loop

@ok	clc
	rts

@bad
	sec
	rts

parse_ip_port
;
; validate the ip string at lowtr, store to ip
; returns carry set on error.
;
; also parses : port

	ldx #6-1
@zloop
	stz ip,x
	dey
	bne @zloop

	lda lowtr
	beq @err

	ldy #0
	ldx #0
@loop
	cpx #4
	bcs @err
	jsr get_num
	pha
	; lda tmp+1
	; bne @err
	lda tmp
	sta ip,x

	inx
	iny
	pla ; term. char / 0 = end of string.
	beq @end

	cmp #'.'
	beq @loop
	cmp #':'
	bne @err

	cpx #4
	bne @err
; port
	jsr get_num
	cmp #0
	bne @err
	lda tmp+1
	sta port
	lda tmp
	sta port+1

@ok
	clc
	rts

@end
	cpx #4
	beq @ok

@err
	sec
	rts

get_num
	stz tmp
	stz tmp+1
@loop
	lda (lowtr+1),y
	; returns last char so can't use xdigit.
	cmp #'0'
	bcc @no
	cmp #'9'+1
	bcs @no

	and #$0f
	pha ; save

	asl tmp ; x 2
	rol tmp+1
	lda tmp+1
	pha
	lda tmp
	pha

	asl tmp ; x 4
	rol tmp+1
	asl tmp ; x 8
	rol tmp+1
	clc
	pla
	adc tmp
	sta tmp
	pla
	adc tmp+1
	sta tmp+1
	clc
	pla
	adc tmp
	sta tmp
	lda #0
	adc tmp+1
	sta tmp+1

	iny
	cpy lowtr
	bcc @loop
	lda #0
	rts
@no
	rts



xdigit
; convert character in a to hex value
; returns carry set on error.
; returns overflow set if hex ('a'-'f')
	cmp #'0'
	bcc @bad
	cmp #'9'+1
	bcs @x
@num
	and #$0f
	rts

@x
	and #$df ; upper case it
	cmp #'A'
	bcc @bad
	cmp #'F'+1
	bcs @bad
	and #$0f ; 1 - 6
;	clc ; still clear
	adc #9 ; 10 - 15
	bit @rts ; set overflow flag.
	rts ; carry will be clear

@bad
	sec
@rts	rts



read_status
	lda #4
	sta $c0b5
	lda #Sn_SR
	sta $c0b6
	lda $c0b7
	rts

command_x
	lda #4
	sta $c0b5
	lda #Sn_CR
	sta $c0b6
	stx $c0b7
	rts

sta_0_loop
	lda #0
sta_loop
; stores A to $c0b7 Y times.
@loop
	sta $c0b7
	dey
	bne @loop
	rts


store_x_to_IR
; store x to Sn_IR
	lda #4
	sta $c0b5
	lda #Sn_IR
	sta $c0b6
	stx $c0b7
	rts

listen_or_connect
	; x = Sn_CR_LISTEN or Sn_CR_CONNECT
	lda #4
	sta $c0b5
	stz $c0b6
	lda #Sn_MR_TCP
	sta $c0b7
	lda #Sn_CR_DISCON
	sta $c0b7
	dec $c0b6
	lda #Sn_CR_CLOSE
	sta $c0b7
	dec $c0b6
	lda #Sn_CR_OPEN
	sta $c0b7
	lda #$ff
	sta $c0b7 ; clear int flags

	lda #Sn_PORT
	sta $c0b6

	cpx #Sn_CR_LISTEN
	beq @listen

	lda rndseed
	sta $c0b7
	inc lport
	lda lport
	sta $c0b7
	bra @cr

@listen
	lda #>6502
	sta $c0b7
	lda #<6502
	sta $c0b7
@cr

	lda #Sn_CR
	sta $c0b6
	stx $c0b7
	rts

listen
	sec
	ror server

	ldx #Sn_CR_LISTEN
	jmp listen_or_connect

*
* called by & SLOT (modem-slot)
*
init
* Input:
* prmtbl[0] = slot
* Output:
* A = 0 on success, 1 on failure. [MWTR is backwards]

	; should store slot ptrs so it's not hardcoded.

*
* Called by &USR 6
*
reset
* Output:
* A = 0 on success, 1 on failure. [MWTR is backwards]

	lda #0

;	jsr dhcp
;	bcc @ok
;	lda #1
;	rts

;@ok
;	jsr listen
;	lda #0
;	rts

exit
	ldx #Sn_CR_CLOSE
	jmp command_x


*
* called by &fn 0
*
online
* online: A=1
* offline: A=0

	jsr read_status
	cmp #Sn_SR_SOCK_ESTABLISHED
	bne @no
	lda #1
	rts

;@d
;	lda #Sn_CR
;	sta $c0b6
;	lda #Sn_CR_DISCON
;	sta $c0b7

@no
	lda #0
	rts

;	lda #1
;	rts

has_mnp
	lda #1
	rts
set_mnp
* prmtbl[0]=0 ; disable error correction
* prmtbl[0]=1 ; enable error correction
	rts

*
* Called by & CALL string
*
dial_number
* Input: 
* prmtbl[0] = length of string
* prmtbl[1:2] = address of string
* prmtbl[3] = Touch-Tone (1) or Pulse. [set to 1]

* parse as xx.xx.xx.xx:port

	lda prmtbl
	sta lowtr
	lda prmtbl+1
	sta lowtr+1
	lda prmtbl+2
	sta lowtr+2


	jsr parse_ip_port
	bcs @err

	lda #4
	sta $c0b5
	lda #Sn_DIPR
	sta $c0b6
	ldx #0
@xloop
	lda ip,x
	sta $c0b7
	inx
	cpx #6
	bne @xloop



	stz server
	ldx #Sn_CR_CONNECT
	jmp listen_or_connect
@err
	rts






*
* Called by & PICKUP 2
*
set_busy:
* prmtbl[0] = 0; go on hook
* prmtbl[0] = 1; go off hook
*
	lda prmtbl
	sta busy

	beq @off
	jmp listen

@off
	ldx #Sn_CR_CLOSE
	jmp command_x



*
* Called by & WAIT FOR CARRIER
*
handle_connect
* Input:
* prmtbl[0:1] = seconds to wait
* Output:
* A = result code
* wait until Sn_IR_CON or timeout.

	stz int_flag
	jsr handle_connect_cb
	bcs @check

@wait
	lda a_handle_connect_cb
	sta prmtbl+2
	lda a_handle_connect_cb+1
	sta prmtbl+3

	ldx tt_id
	ldy #WaitSeconds
	jsr OMMVEC

	bcc @to
@check
	lda int_flag
	bmi @esc
;	bit #Sn_IR_TIMEOUT
;	bne @to
	bit #Sn_IR_CON
	bne @ok

@to
	lda #2 ; no connection
	dc.b $2c ; bit hide
@esc	lda #1 ; canceled
	sta $c010
	pha
	jsr listen
	pla
	rts

@ok
	; clear the connect int. bit
	ldx #Sn_IR_CON
	jsr store_x_to_IR
	lda #0 ; connection established
	rts

handle_connect_cb
	lda #4
	sta $c0b5
	lda #Sn_IR
	sta $c0b6
	lda $c0b7
	sta int_flag
	and #(Sn_IR_CON or Sn_IR_TIMEOUT)
	bne @ex

@kbd
	lda $c000
	and #$80
	tsb int_flag
@ex	cmp #1
	rts


*
* called by & PICKUP [0]
* 
answer_line
* pick up the phone and send answer carrier tone
	stz mode
	rts
;answer_common
	; clear the connect int. bit [????]
;	ldx #Sn_IR_CON
;	jmp store_x_to_IR

*
* Called by & PICKUP 1
*
orig_ans_line
	lda #1
	sta mode
	rts
;	bra answer_common

*
* called by & HANGUP
*
hang_up
; TODO - should disconn then wait 2s for
; peer to disconnect as well.

	jmp listen


*
* Called by & FN 1
* Called by & WAIT FOR CALL
is_ringing
* C=0; no ring
* C=1; ring detected.


* "ring" if server mode and Sn_IR_CON flag set.

	lda server
	beq @no

	lda #4
	sta $c0b5
	lda #Sn_IR
	sta $c0b6
	lda $c0b7
	and #Sn_IR_CON
	beq @no
	sec
	rts


@no
	clc
	rts


*
* Called by & USR 3/4/5
*
set_speaker
* prmtbl[0] = speaker mode
	rts

*
* Called by & FN 3
*
get_mode
	lda mode ; answer mode
	rts
*
* Called by & FN 6
*
modem_type
	lda #1 ; internal
	rts



set_modem
* prmtbl[0:1] = address of modem cap
	rts

*
* Called by & SPEED=
*
set_modem_speed
* prmtbl[0] = speed
	rts

*
* called by & WAIT FOR STRING to clear modem string search.
*
remove_search_strings
* undocumented.
	rts

*
* Called by & FN 9 , & FN 2
*
connect_speed
* output:
* A = speed
	lda #15 ; 19200
	sta prmtbl
	rts

*
* Called by & FN 128
*
connect_speed_cstr
* output:
* prmtbl[0:1] = c-str of the connect speed

	lda a_connect_speed_str
	sta prmtbl
	lda a_connect_speed_str+1
	sta prmtbl+1
	rts


dhcp
	; re-set, enable auto-increment mode

	lda #$80
	sta $c0b4
	nop
	nop
	lda #$03
	sta $c0b4
	; give all memory to socket 0

	lda #RMSR
	stz $c0b5
	sta $c0b6
	lda #%00000011 ; 8k for the socket
	sta $c0b7 ; RMSR
	sta $c0b7 ; TMSR

	; set the MAC address...
	lda #SHAR
	sta $c0b6
	ldy #0
@mloop
	lda mac,y
	sta $c0b7
	iny
	cpy #6
	bne @mloop

; socket 1 = UDP, broadcast
	lda #$04
	sta $c0b5
	stz $c0b6

	lda #Sn_MR_UDP
	sta $c0b7

; source port
	lda #Sn_PORT
	sta $c0b6
	stz $c0b7
	lda #68
	sta $c0b7

; set dest ip/mac to $ff
	ldy #6+4
	lda #$ff
	jsr sta_loop

	; dest port
	stz $c0b7
	lda #67
	sta $c0b7

; now open UDP
	lda #Sn_CR
	sta $c0b6
	lda #Sn_CR_OPEN
	sta $c0b7

	lda #5
	sta dhcp_retry

discover
	jsr send_dhcp_discover	

	jsr wait_2_seconds
	bcs @check
	; timeout
@retry	dec dhcp_retry
	bne discover
	bra dhcp_error
@check
	; check for a DHCP offer.
	; if present, pull out the dhcp ip address and our ip address.

	jsr read_message
	bit bootp
	bpl @notbootp
	cmp #0
	bne @retry
	bra dhcp_ok


@notbootp
	cmp #DHCP_OFFER
	beq request
	bra @retry
	; todo -- should call read_message until RSR == 0

request
	jsr send_dhcp_request
	jsr wait_2_seconds
	bcs @check
	; timeout
@retry	dec dhcp_retry
	bne request
	bra dhcp_error

@check
	; check for an ACK
	; if present, pull out the dhcp ip address and our ip address.

	jsr read_message
	cmp #DHCP_ACK
	beq dhcp_ok
	bra @retry

	;

dhcp_ok
	jsr dhcp_commit
	ldx #Sn_CR_CLOSE
	jsr command_x

	lda #1
	clc
	rts

dhcp_error
	ldx #Sn_CR_CLOSE
	jsr command_x

	lda #0
	sec
	rts

wait_2_seconds
	; 2-second wait...
	lda #2
	sta prmtbl
	stz prmtbl+1
	lda a_data_avail
	sta prmtbl+2
	lda a_data_avail+1
	sta prmtbl+3
	ldy #WaitSeconds
	ldx tt_id
	jmp OMMVEC

data_avail
	; called from WaitTick callback
	; returns carry set to cancel the wait

	lda #4
	sta $c0b5
	lda #Sn_IR
	sta $c0b6
	lda $c0b7
	sta int_flag
	and #Sn_IR_RECV
	cmp #1
	rts


	if 0 then
	clc
	lda #$04
	sta $c0b5
	lda #Sn_RX_RSR
	sta $c0b6
	lda $c0b7
	ora $c0b7
	beq @no
	sec
@no	rts
	endif


	

send_dhcp_discover

	bit bootp
	bmi @bootp

	lda #dhcp_disc_pl_len
	sta lowtr
	lda a_dhcp_disc_pl
	sta lowtr+1
	lda a_dhcp_disc_pl+1
	sta lowtr+2
	bra send_dhcp_common

@bootp
	lda #bootp_req_pl_len
	sta lowtr
	lda a_bootp_req_pl
	sta lowtr+1
	lda a_bootp_req_pl+1
	sta lowtr+2
	bra send_dhcp_common



send_dhcp_request

	ldy #3
@iloop	lda ip_address,y
	sta req_ip,y
	lda dhcp_address,y
	sta req_server_ip,y
	dey
	bpl @iloop


	lda #dhcp_req_pl_len
	sta lowtr
	lda a_dhcp_req_pl
	sta lowtr+1
	lda a_dhcp_req_pl+1
	sta lowtr+2

	bra send_dhcp_common


send_dhcp_common

	lda #$04
	sta $c0b5
	lda #Sn_TX_WR
	sta $c0b6
	lda $c0b7
	sta a1+1
	lda $c0b7
	sta a1

	lda a1+1
	and #$1f
	ora #$40
	sta $c0b5
	lda a1
	sta $c0b6

	; now points to start of the buffer.
	ldy #0
@hloop
	lda bootp_hdr,y
	sta $c0b7
	iny
	cpy #bootp_hdr_len
	bne @hloop

	; 0-pad until mac address @28
	ldy #28-bootp_hdr_len
	jsr sta_0_loop

	; mac address
	ldy #0
@mloop
	lda mac,y
	sta $c0b7
	iny
	cpy #6
	bne @mloop

	; 0-pad until cookie at 236
	ldy #236-34
	jsr sta_0_loop


	; copy dhcp options
	ldy #0
@dloop
	lda (lowtr+1),y
	sta $c0b7
	iny
	cpy lowtr
	bne @dloop

	; 0-pad to 300 bytes
	lda #300-236
	sec
	sbc lowtr
	tay
	jsr sta_0_loop

	lda #04
	sta $c0b5
	lda #Sn_TX_WR
	sta $c0b6

	clc
	lda a1
	adc #<300
	sta a1
	lda a1+1
	adc #>300
	sta a1+1

	sta $c0b7
	lda a1
	sta $c0b7

	ldx #Sn_CR_SEND_MAC
	jmp command_x



set_rx_ptr
	; prepare for reading a1+a from the rx buffer
	clc
	adc a1
	sta $c0b6
	lda #0
	adc a1+1
	and #$7f
	ora #$60
	sta $c0b5
	rts

read_message
	; read a message from the w5100.
	; returns dhcp message type in A / -1 on error.

	; udp header:
	; ip address / port / size

	; set IDM address to rd buffer.

	stz dhcp_msg_type

	; a1 = Sn_RX_RD
	lda #4
	sta $c0b5
	lda #Sn_RX_RD
	sta $c0b6
	lda $c0b7
	sta a1+1
	lda $c0b7
	sta a1

	; skip ip/port (6 bytes)
	lda #6
	jsr set_rx_ptr


	; payload size
	lda $c0b7
	sta a2+1
	lda $c0b7
	sta a2
	; s/b > 240 bytes
	lda a2+1
	bne rm_ok
	lda a2
	cmp #240
	bcs rm_ok

rm_bad
	ldy #-1
rm_exit
	; add 8-bytes for header
	lda a1
	clc
	adc #8
	sta a1
	lda #0
	adc a1+1
	sta a1+1
	; add length
	lda a1
	clc
	adc a2
	sta a1
	lda a1+1
	adc a2+1
	sta a1+1
	lda #4
	sta $c0b5
	lda #Sn_RX_RD
	sta $c0b6
	lda a1+1
	sta $c0b7
	lda a1
	sta $c0b7
	ldx #Sn_IR_RECV
	jsr store_x_to_IR
	ldx #Sn_CR_RECV
	jsr command_x

	tya
	rts



rm_ok

	; check the xid - offset 4

check_xid
	lda #8+4
	jsr set_rx_ptr
	ldy #0
@loop	lda $c0b7
	cmp xid,y
	bne rm_bad
	iny
	cpy #4
	bne @loop

check_ip
	; ip address
	lda #8+16
	jsr set_rx_ptr
	ldy #0
@loop	lda $c0b7
	sta ip_address,y
	iny
	cpy #4
	bne @loop

check_cookie
	; check the cookie
	lda #236+8
	jsr set_rx_ptr
	ldy #0
@loop	lda $c0b7
	cmp cookie,y
	bne rm_bad
	iny
	cpy #4
	bne @loop


	; parse the options.  only looking for 
	; message type = offer
	; dhcp server id
oloop
	lda $c0b7
	beq oloop ; pad option
	cmp #-1
	beq oend
	ldx #4*2
@loop
	cmp option_table,x
	beq @dispatch
	dex
	dex
	bpl @loop

; unknown option - read length byte and skip over it.
	ldx $c0b7 ; len byte
	jsr skipx0
	bra oloop

@dispatch
	lda $c0b7 ; length
	jmp (option_dispatch,x)	

oend
	ldy dhcp_msg_type
	jmp rm_exit


option_1 ; subnet mask
	; +---+---+------+
	; | 1 | 4 | mask |
	; +---+---+------+
	ldy #0
@loop	lda $c0b7
	sta subnet_mask,y
	iny
	cpy #4
	bne @loop
	jmp oloop

option_3 ; router
	; +---+---+------------+
	; | 3 | n | address... |
	; +---+---+------------+
	tax  ; save length for now...
	ldy #0
@loop	lda $c0b7
	sta gateway_address,y
	iny
	dex
	cpy #4
	bne @loop

	; may be > 1 router
	jsr skipx0
	jmp oloop

option_6 ; dns server
	; +---+---+------------+
	; | 3 | n | address... |
	; +---+---+------------+
	tax  ; save length for now...
	ldy #0
@loop	lda $c0b7
	sta dns_address,y
	iny
	dex
	cpy #4
	bne @loop

	; may be > 1 router
	jsr skipx0
	jmp oloop

option_53 ; dhcp message type
	; +----+---+----+
	; | 53 | 1 | xx |
	; +----+---+----+
	lda $c0b7
	sta dhcp_msg_type
	jmp oloop

option_54
	; server identity
	; +----+---+---------+
	; | 54 | 4 | address |
	; +----+---+---------+

	ldy #0
@loop	lda $c0b7
	sta dhcp_address,y
	iny
	cpy #4
	bne @loop
	jmp oloop




;
; read (and discard) x bytes from $c0b7. 
;
skipx0
	cpx #0
	beq skip_rts
skipx
@loop	lda $c0b7
	dex
	bne @loop
skip_rts
	rts



dhcp_commit
;
; update values in the wiznet
;
	stz $c0b5
	lda #GAR
	sta $c0b6

; gateway and subnet
	ldy #0
@loop1	lda gateway_address,y
	sta $c0b7
	iny
	cpy #8
	bne @loop1

;	ldy #0
;@loop2	lda subnet_mask,y
;	sta $c0b7
;	iny
;	cpy #4
;	bne @loop2

	lda #SIPR
	sta $c0b6
	ldy #0
@loop3	lda ip_address,y
	sta $c0b7
	iny
	cpy #4
	bne @loop3

; send message to set DNS?

	rts




	dc.b 0

*
* immediate section
*

a_info	dc.w info
a_connect_speed_str
	dc.w connect_speed_str

a_handle_connect_cb
	dc.w handle_connect_cb

a_data_avail dc.w data_avail

a_dhcp_disc_pl
	dc.w dhcp_disc_pl

a_dhcp_req_pl
	dc.w dhcp_req_pl

a_bootp_req_pl
	dc.w bootp_req_pl

a_space
	dc.w space

user_dispatch
	dc.w init
	dc.w exit
	dc.w online
	dc.w has_mnp
	dc.w dial_number
	dc.w set_busy
	dc.w handle_connect
	dc.w answer_line
	dc.w hang_up
	dc.w is_ringing
	dc.w set_mnp
	dc.w orig_ans_line
	dc.w reset
	dc.w set_speaker
	dc.w get_mode
	dc.w modem_type
	dc.w connect_speed
	dc.w set_modem
	dc.w set_modem_speed
	dc.w remove_search_strings
	dc.w connect_speed_cstr

option_dispatch
	dc.w option_1,option_3,option_6,option_53,option_54


amper_dispatch
	dc.w amper_mset ; mset
	dc.w amper_mac
	dc.w amper_ip
	dc.w amper_dhcp
	dc.w amper_bootp

	dc.w 0

*
* data section
*

	msb on
info	cstr '&SYSDATE Modem (W5100) 1.0'
	msb off

connect_speed_str cstr '19200'


amperct
	dc.b 'MSET',0
	dc.b 'MAC',0
	dc.b 'IP',0
	dc.b 'DHCP',0
	dc.b 'BOOTP',0
	dc.b -1

hex	dc.b '0123456789abcdef'


tt_id	dc.b 0
pt_id	dc.b 0

server	dc.b 0
mode	dc.b 0
busy	dc.b 0


ip	dc.l 0
port	dc.w 0

; local port; incremented w/ connect/listen.
; other half is from RND seed. (and adjusted by RND())
lport	dc.b $00

tmp	dc.w 0
int_flag	dc.b 0



bootp	dc.b 0
dhcp_retry	dc.b 0

dhcp_msg_type	dc.b 0
dhcp_address	dc.l 0

; order is important.
; gateway/subnet matches w5100
; ip/subnet/gateway/dns (reversed) matches & ip 
dns_address	dc.l 0
gateway_address	dc.l 0
subnet_mask	dc.l 0
ip_address	dc.l 0

option_table
	dc.w 1,3,6,53,54



mac	dc.b $00,$08,$dc,$a2,$a2,$a2

bootp_hdr ; boot req, ethernet, hw len 6, 0 hops
	dc.b $01,$01,$06,$00
xid	dc.b $12,$34,$56,$78 ; xid
	dc.b $00,$00,$80,00 ; seconds elapsed, flags (broadcast)
bootp_hdr_len equ *-bootp_hdr



dhcp_disc_pl ; cookie + discover + parm list
cookie	dc.b $63,$82,$53,$63
	dc.b $35,$01,$01
	dc.b $37,$04,$01,$03,$06,$1a
	dc.b $ff
dhcp_disc_pl_len equ *-dhcp_disc_pl


dhcp_req_pl ; cookie + req + parm list
	dc.b $63,$82,$53,$63
	dc.b $35,$01,$03
	dc.b $37,$04,$01,$03,$06,$1a
	dc.b $39,$02,$05,$b4
	dc.b $36,$04
req_server_ip
	dc.b $ff,$ff,$ff,$ff ; dhcp server id
	dc.b $32,$04
req_ip
	dc.b $ff,$ff,$ff,$ff ; req. ip
	dc.b $ff
dhcp_req_pl_len equ *-dhcp_req_pl


bootp_req_pl
	dc.b $63,$82,$53,$63
	dc.b $ff
bootp_req_pl_len equ *-bootp_req_pl


space	; mac = 6 * 3 = 18
	; dns = 4 *3 = 12
	ds.b 18

end
	endp
	end
