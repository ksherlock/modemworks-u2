

	string asis
	machine m65c02
	case on

	longa off
	longi off

	include 'OMM.equ'
	include 'TimeTool.equ'
	include 'W5100.equ'
	include 'dhcp.equ'

	macro
&l	cstr &x
&l	dc.b &x, 0
	endm

a1	equ $3c
a2	equ $3e
a4	equ $42


prmtbl	equ $e0
lowtr	equ $9b

getbufr         equ    $bef5
freebufr        equ    $bef8

chrget	equ $b1
chrgot	equ $b7
chkcom	equ $debe ; matches and consumes ',' or generates a syntax error.
chkcls	equ $deb8 ; matches and consumes ')' or generates a syntax error
chkopn  equ $debb ; matches and consumes '(' or generates a syntax error
getbyte	equ $e6f8



Header	proc

	dc.w $0000 ; header version
	dc.w $5100 ; unique id
	dc.w end-start ; size
	dc.w start
	dc.w amperct
	dc.w $0000 ; module kind
	dc.w $0000 ; reserved
	dc.w $0000 ; reserved

start

	cmp #MSG_INIT
	beq do_life
	cmp #MSG_QUIT
	beq do_life
	cmp #MSG_AMPR
	beq do_ampr
	cmp #MSG_INFO
	beq do_info
	cmp #MSG_USER
	beq do_user
	rts

do_info
	lda a_info
	sta a1
	lda a_info+1
	sta a1+1
	rts

do_life
	; find the time tool ('tt')
	lda #'t'
	sta a1
	sta a1+1
	ldy #OMM_ID
	ldx #OMM_GETID
	jsr OMMVEC
	stx tt_id
	rts


do_ampr
	tya
	asl a
	tax
	jmp (amper_dispatch,x)
	;

do_user
	tya
	asl a
	tax
	jmp (user_dispatch,x)

sta_loop
; stores A to $c0b7 Y times.
@loop
	sta $c0b7
	dey
	bne @loop
	rts




amper_ip
	; & ip get -> returns address info
	; & ip var1$, var2$, var3$, var4$, var5$
	; set the ip address, netmask, gateway, dns server 

amper_bootp
	; & bootp , var
	; sets var = 1 on success, 0 on failure.
	; sends BOOTP message to acquire ip address, etc
	; DHCP is built on top of bootp; the bootp request
	; is essentially DHCP without the message-type option.


	lda #$80
	sta bootp
	jsr dhcp_common
	bra handle_rv


amper_dhcp
	; & dhcp end -> release
	; & dhcp resume -> request [renew lease]
	; & dhcp [new] -> discover / request

	; &dhcp , var
	; sets var = 1 on success, 0 on failure.


	; n.b. - for renewal, a request is sent, unicast,
	; to the dhcp server.  this means the dhcp server 
	; must be known.

	stz bootp

	jsr dhcp_common ; returns carry clear/set

handle_rv
	; handle a return value

	lda #1
	bcc @ok
	lda #0
@ok
	sta a1
	stz a1+1


	jsr chrgot
	beq @eol
;	cmp #','
;	bne @eol
	jsr chkcom
	ldy #OMM_PUTWORD
	ldx #OMM_ID
	jmp OMMVEC

@eol	rts



dhcp_common
	; reset, enable auto-inc
	lda #$80
	sta $c0b4
	nop
	nop
	lda #$03
	sta $c0b4

	lda #RMSR
	stz $c0b5
	sta $c0b6
	lda #%00000011 ; 8k for the socket
	sta $c0b7 ; RMSR
	sta $c0b7 ; TMSR

	; set the MAC address...
	lda #SHAR
	sta $c0b6
	ldy #0
@mloop
	lda mac,y
	sta $c0b7
	iny
	cpy #6
	bne @mloop


; socket 1 = UDP, broadcast
	lda #$04
	sta $c0b5
	stz $c0b6

	lda #Sn_MR_UDP
	sta $c0b7

; source port
	lda #Sn_PORT
	sta $c0b6
	stz $c0b7
	lda #68
	sta $c0b7

; set dest ip/mac to $ff
	ldy #6+4
	lda #$ff
@dloop
	sta $c0b7
	dey
	bne @dloop

	; dest port
	stz $c0b7
	lda #67
	sta $c0b7

; now open UDP
	lda #Sn_CR
	sta $c0b6
	lda #Sn_CR_OPEN
	sta $c0b7


	lda #5
	sta retry

discover
	jsr send_dhcp_discover	

	jsr wait_2_seconds
	bcs @check
	; timeout
@retry	dec retry
	bne discover
	jmp dhcp_error
@check
	; check for a DHCP offer.
	; if present, pull out the dhcp ip address and our ip address.

	jsr read_message
	cmp #DHCP_OFFER
	beq request
	bra @retry
	; todo -- should call read_message until RSR == 0


request
	; if this is a bootp message, we are now finished
	bit bootp
	bmi @ok


	jsr send_dhcp_request
	jsr wait_2_seconds
	bcs @check
	; timeout
@retry	dec retry
	bne request
	jmp dhcp_error

@check
	; check for an ACK
	; if present, pull out the dhcp ip address and our ip address.

	jsr read_message
	cmp #DHCP_ACK
	beq @ok
	bra @retry

	;

@ok	jmp dhcp_commit
;	rts

dhcp_error
	sec
	rts

wait_2_seconds
	; 2-second wait...
	lda #2
	sta prmtbl
	stz prmtbl+1
	lda a_data_avail
	sta prmtbl+2
	lda a_data_avail+1
	sta prmtbl+3
	ldy #WaitSeconds
	ldx tt_id
	jmp OMMVEC

data_avail
	; called from WaitTick callback
	; returns carry set to cancel the wait
	clc
	lda #$04
	sta $c0b5
	lda #Sn_RX_RSR
	sta $c0b6
	lda $c0b7
	ora $c0b7
	beq @no
	sec
@no	rts



send_bootp

	; should store payload address / length in variables,
	; unify code...

	jsr send_dhcp_common
	ldy #0
@dloop
	lda bootp_req_pl,y
	sta $c0b7
	iny
	cpy #bootp_req_pl_len
	bne @dloop

	; 0-pad to 300 bytes

send_bootp_request

	lda bootp_req_pl_len
	sta lowtr
	lda a_bootp_req_pl
	sta lowtr+1
	lda a_bootp_req_pl+1
	sta lowtr+2

	jmp send_dhcp_common


send_dhcp_discover


	lda dhcp_disc_pl_len
	sta lowtr
	lda a_dhcp_disc_pl
	sta lowtr+1
	lda a_dhcp_disc_pl+1
	sta lowtr+2

	jmp send_dhcp_common




send_dhcp_request

	ldy #3
@iloop	lda ip_address,y
	sta req_ip,y
	lda dhcp_address,y
	sta req_server_ip,y
	dey
	bpl @iloop


	lda dhcp_req_pl_len
	sta lowtr
	lda dhcp_req_pl
	sta lowtr+1
	lda dhcp_req_pl+1
	sta lowtr+2

	jmp send_dhcp_common



send_dhcp_common

	lda #$04
	sta $c0b5
	lda #Sn_TX_WR
	sta $c0b6
	lda $c0b7
	sta a1+1
	lda $c0b7
	sta a1

	lda a1+1
	and #$1f
	ora #$40
	sta $c0b5
	lda a1
	sta $c0b6

	; now points to start of the buffer.
	ldy #0
@hloop
	lda bootp_hdr,y
	sta $c0b7
	iny
	cpy #bootp_hdr_len
	bne @hloop

	; 0-pad until mac address @28
	ldy #28-bootp_hdr_len
	lda #0
	jsr sta_loop

	; mac address
	ldy #0
@mloop
	lda mac,y
	sta $c0b7
	iny
	cpy #6
	bne @mloop

	; 0-pad until cookie at 236
	ldy #236-34
	lda #0
	jsr sta_loop

; now copy cookie / options
; lowtr = length
; lowtr+1/2 = ptr

	; dhcp data
	ldy #0
@dloop
	lda (lowtr+1),y
	sta $c0b7
	iny
	cpy lowtr
	bne @dloop

	; 0-pad to 300 bytes.
	lda #300-236
	sec
	sbc lowtr
	tay
	lda #0
	jsr sta_loop


	lda #04
	sta $c0b5
	lda #Sn_TX_WR
	sta $c0b6

	clc
	lda a1
	adc #(300)
	sta a1
	lda a1+1
	adc #(300)>>8
	sta a1+1

	sta $c0b7
	lda a1
	sta $c0b7

	lda #Sn_CR
	sta $c0b6
	lda #Sn_CR_SEND_MAC
	sta $c0b7
	rts





	rts



set_rx_ptr
	; prepare for reading a1+a from the rx buffer
	clc
	adc a1
	sta $c0b6
	lda #0
	adc a1+1
	and #$7f
	ora #$60
	sta $c0b5
	rts

read_message
	; read a message from the w5100.
	; returns dhcp message type in A / -1 on error.

	; udp header:
	; ip address / port / size

	; set IDM address to rd buffer.


	; a1 = Sn_RX_RD
	lda #4
	sta $c0b5
	lda #Sn_RX_RD
	sta $c0b6
	lda $c0b7
	sta a1+1
	lda $c0b7
	sta a1

	; skip ip/port (6 bytes)
	lda #6
	jsr set_rx_ptr


	; payload size
	lda $c0b7
	sta a2+1
	lda $c0b7
	sta a2
	; s/b > 240 bytes
	lda a2+1
	bne rm_ok
	lda a2
	cmp #240
	bcs rm_ok

rm_bad
	ldy #-1
rm_exit
	; add 8-bytes for header
	lda a1
	clc
	adc #8
	sta a1
	lda #0
	adc a1+1
	sta a1+1
	; add length
	lda a1
	clc
	adc a2
	sta a1
	lda a1+1
	adc a2+1
	sta a1+1
	lda #4
	sta $c0b5
	lda #Sn_RX_RD
	sta $c0b6
	lda a1+1
	sta $c0b7
	lda a1
	sta $c0b7
	lda #Sn_CR
	sta $c0b6
	lda #Sn_CR_RECV
	sta $c0b7

	tya
	rts



rm_ok

	; check the xid - offset 4
check_msg_typ
;	lda #8
;	jsr set_rx_ptr
	lda $c0b7
	cmp #BOOTP_REPLY ; boot reply
	bne rm_bad

check_xid
	ldx #3
	jsr skipx
;	lda #8+4
;	jsr set_rx_ptr
	ldy #0
@loop	lda $c0b7
	cmp xid,y
	bne rm_bad
	iny
	cpy #4
	bne @loop

check_ip
	; ip address
	lda #8+16
	jsr set_rx_ptr
	ldy #0
@loop	lda $c0b7
	sta ip_address,y
	iny
	cpy #4
	bne @loop

check_cookie
	; check the cookie
	lda #236+8
	jsr set_rx_ptr
	ldy #0
@loop	lda $c0b7
	cmp cookie,y
	bne rm_bad
	iny
	cpy #4
	bne @loop


	; parse the options.  only looking for 
	; message type = offer
	; dhcp server id
oloop
	lda $c0b7
	beq oloop ; pad option
	cmp #-1
	beq oend
	ldx #4*2
@loop
	cmp option_table,x
	beq @dispatch
	dex
	dex
	bpl @loop

; unknown option - read length byte and skip over it.
	ldx $c0b7 ; len byte
	jsr skipx0
	bra oloop

@dispatch
	lda $c0b7 ; length
	jmp (option_dispatch,x)	

oend
	ldy dhcp_msg_type
	jmp rm_exit


option_1 ; subnet mask
	; +---+---+------+
	; | 1 | 4 | mask |
	; +---+---+------+
	ldy #0
@loop	lda $c0b7
	sta subnet_mask,y
	iny
	cpy #4
	bne @loop
	jmp oloop

option_3 ; router
	; +---+---+------------+
	; | 3 | n | address... |
	; +---+---+------------+
	tax  ; save length for now...
	ldy #0
@loop	lda $c0b7
	sta gateway_address,y
	iny
	dex
	cpy #4
	bne @loop

	; may be > 1 router
	jsr skipx0
	jmp oloop

option_6 ; dns server
	; +---+---+------------+
	; | 3 | n | address... |
	; +---+---+------------+
	tax  ; save length for now...
	ldy #0
@loop	lda $c0b7
	sta dns_address,y
	iny
	dex
	cpy #4
	bne @loop

	; may be > 1 router
	jsr skipx0
	jmp oloop

option_53 ; dhcp message type
	; +----+---+----+
	; | 53 | 1 | xx |
	; +----+---+----+
	lda $c0b7
	sta dhcp_msg_type
	jmp oloop

option_54
	; server identity
	; +----+---+---------+
	; | 54 | 4 | address |
	; +----+---+---------+

	ldy #0
@loop	lda $c0b7
	sta dhcp_address,y
	iny
	cpy #4
	bne @loop
	jmp oloop




;
; read (and discard) x bytes from $c0b7. 
;
skipx0
	cpx #0
	beq skip_rts
skipx
@loop	lda $c0b7
	dex
	bne @loop
skip_rts
	rts



dhcp_commit
;
; update values in the wiznet
;
	stz $c0b5
	lda #GAR
	sta $c0b6

	ldy #0
@loop1	lda gateway_address,y
	sta $c0b7
	iny
	cpy #4
	bne @loop1

	ldy #0
@loop2	lda subnet_mask,y
	sta $c0b7
	iny
	cpy #4
	bne @loop2

	lda #SIPR
	sta $c0b6
	ldy #0
@loop3	lda ip_address,y
	sta $c0b7
	iny
	cpy #4
	bne @loop3

; send message to set DNS?

; close the socket
	lda #4
	sta $c0b5
	lda #Sn_CR
	sta $c0b6
	lda #Sn_CR_CLOSE
	sta $c0b7

	clc
	rts




	dc.b $00 ; end code

immed

a_info	dc.w info
a_data_avail dc.w data_avail

a_dhcp_disc_pl
	dc.w dhcp_disc_pl
a_dhcp_req_pl
	dc.w dhcp_req_pl
a_bootp_req_pl
	dc.w bootp_req_pl

option_dispatch
	dc.w option_1,option_3,option_6,option_53,option_54


amper_dispatch
	dc.w amper_dhcp
	dc.w amper_bootp
	dc.w amper_ip

user_dispatch
	; nothing yet!

	dc.w $0000 ; end immed


	msb on
info	cstr '&SYSDATE DHCP (W5100) 1.0'
	msb off

amperct
	dc.b 'BOOTP',$00
	dc.b 'DHCP',$00
	dc.b 'IP',$00
	dc.b -1



tt_id	dc.b 0
retry	dc.b 0
bootp	dc.b 0


dhcp_msg_type	dc.b 0
subnet_mask	dc.l 0
dhcp_address	dc.l 0
gateway_address	dc.l 0
ip_address	dc.l 0
dns_address	dc.l 0

option_table
	dc.w 1,3,6,53,54



mac	dc.b $00,$08,$dc,$a2,$a2,$a2

bootp_hdr ; boot req, ethernet, hw len 6, 0 hops
	dc.b $01,$01,$06,$00
xid	dc.b $12,$34,$56,$78 ; xid
elapsed	dc.b $00,$00
	dc.b $80,00 ; seconds elapsed, flags (broadcast)
bootp_hdr_len equ *-bootp_hdr

dhcp_disc_pl
	dc.b $63,$82,$53,$63 ; cookie
	dc.b $35,$01,$01 ; dhcp discover
	dc.b $37,$04,$01,$03,$06,$1a ; parm list
	dc.b $ff ; end of options
dhcp_disc_pl_len equ *-dhcp_disc_pl


dhcp_req_pl ; cookie + req + parm list

cookie	dc.b $63,$82,$53,$63 ; cookie
	dc.b $35,$01,$03 ; dhcp request
	dc.b $37,$04,$01,$03,$06,$1a ; parm list
	dc.b $39,$02,$05,$b4 ; max dhcp message size
	dc.b $36,$04 ; dhcp server id
req_server_ip
	dc.b $ff,$ff,$ff,$ff ; dhcp server id
	dc.b $32,$04 ; requested ip
req_ip
	dc.b $ff,$ff,$ff,$ff
	dc.b $ff ; end of options
dhcp_req_pl_len equ *-dhcp_req_pl


bootp_req_pl
	dc.b $63,$82,$53,$63 ; cookie
	dc.b $ff ; end of options
bootp_req_pl_len equ *-bootp_req_pl






end

	endp


	end